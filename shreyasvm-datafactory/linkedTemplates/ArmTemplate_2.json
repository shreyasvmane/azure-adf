{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "shreyasvm-datafactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PipeDBtoPoolWareHouse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyFromDbtoWarehouse",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkStagingBlob",
									"type": "LinkedServiceReference"
								},
								"path": "outputs"
							}
						},
						"inputs": [
							{
								"referenceName": "DataInSQLDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DatasetOutWarehouse",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "BulkDBCopy"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-21T09:50:37Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipeLineWatermarkMoveData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select WatermarkValue from dbo.watermarktable \nwhere tablename=@{pipeline().parameters.tablename}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DatasetInWatermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyfromDBtoStore",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from [dbo].[@{pipeline().parameters.tablename}]\nwhere LastModifyDate > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatasetInWatermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DatasetOutWatermarkStore",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"tablename": {
						"type": "string",
						"defaultValue": "transactions"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-22T03:49:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipeLoanDatatoDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyLoanDatatoSQLdb",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Loan_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Loan_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Gender",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Marital",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Marital",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Dependents",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Dependents",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Education",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Education",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SelfEmplo",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SelfEmplo",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ApplIncome",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ApplIncome",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CoApplIncome",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CoApplIncome",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "LoanAmt",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanAmt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Term",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Term",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "CreditHistory",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CreditHistory",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "PropArea",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PropArea",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "LoanStatus",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanStatus",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LoanDataInBlobStore",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LoanDataOutAzureDb",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-29T09:18:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipeMergeFiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyAndMergeFiles",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DatasetInBlobJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DatasetOutBlobJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "BulkDBCopy"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-21T08:19:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipeTableName')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * from @{pipeline().parameters.Table_Schema}.@{pipeline().parameters.Table_Name}\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DatasetInShreyasDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Table_Schema": {
						"type": "string",
						"defaultValue": "SalesLT"
					},
					"Table_Name": {
						"type": "string",
						"defaultValue": "Product"
					}
				},
				"folder": {
					"name": "BulkDBCopy"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-21T05:22:36Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowFilterAgg')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetInSQLShreyasDBProduct",
								"type": "DatasetReference"
							},
							"name": "IngestProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetOutShreyasdbProduct",
								"type": "DatasetReference"
							},
							"name": "OutputShreyasdbStore"
						}
					],
					"transformations": [
						{
							"name": "FilterForColor"
						},
						{
							"name": "GroupAndAgreeOnColorForPrice"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> IngestProduct",
						"IngestProduct filter(Color==\"Red\"|| Color==\"Black\"|| Color==\"White\" || Color==\"Blue\") ~> FilterForColor",
						"FilterForColor aggregate(groupBy(Color),",
						"     ListPrice = avg(ListPrice)) ~> GroupAndAgreeOnColorForPrice",
						"GroupAndAgreeOnColorForPrice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {1} as string,",
						"          Prop_1 as string,",
						"          Bikes as string,",
						"          {cfbda25c-df71-47a7-b81b-64ee161aa37c} as string,",
						"          {2002-06-01 00:00:00.0000000} as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OutputShreyasdbStore"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowLoanDataAgg')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LoanDataOutAzureDb",
								"type": "DatasetReference"
							},
							"name": "IngestLoanData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetOutShreyasDataStoreOutputs",
								"type": "DatasetReference"
							},
							"name": "OutputLoanDataAgg"
						}
					],
					"transformations": [
						{
							"name": "AggregateAmount"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Loan_ID as string,",
						"          Gender as integer,",
						"          Marital as integer,",
						"          Dependents as integer,",
						"          Education as integer,",
						"          SelfEmplo as integer,",
						"          ApplIncome as integer,",
						"          CoApplIncome as integer,",
						"          LoanAmt as integer,",
						"          Term as double,",
						"          CreditHistory as integer,",
						"          PropArea as integer,",
						"          LoanStatus as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> IngestLoanData",
						"IngestLoanData aggregate(groupBy(Gender),",
						"     ApplIncome = avg(ApplIncome)) ~> AggregateAmount",
						"AggregateAmount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OutputLoanDataAgg"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataflowEducationSplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LoanDataOutAzureDb",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LoanDataMaritalGen0Out",
								"type": "DatasetReference"
							},
							"name": "sinkEducation0agg"
						},
						{
							"dataset": {
								"referenceName": "LoanDataMaritalGen1Out",
								"type": "DatasetReference"
							},
							"name": "sinkEducation1agg"
						}
					],
					"transformations": [
						{
							"name": "TotalIncome"
						},
						{
							"name": "split1"
						},
						{
							"name": "aggregateEd0"
						},
						{
							"name": "aggregateEd1"
						},
						{
							"name": "selectRequired"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Loan_ID as string,",
						"          Gender as integer,",
						"          Marital as integer,",
						"          Dependents as integer,",
						"          Education as integer,",
						"          SelfEmplo as integer,",
						"          ApplIncome as integer,",
						"          CoApplIncome as integer,",
						"          LoanAmt as integer,",
						"          Term as double,",
						"          CreditHistory as integer,",
						"          PropArea as integer,",
						"          LoanStatus as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(TotalIncome = add(ApplIncome,CoApplIncome)) ~> TotalIncome",
						"selectRequired split(Education==0,",
						"     Education==1,",
						"     disjoint: false) ~> split1@(Education0, Education1, EducationAll)",
						"split1@Education0 aggregate(groupBy(Gender),",
						"     TotalIncome = avg(TotalIncome)) ~> aggregateEd0",
						"split1@Education1 aggregate(groupBy(Gender),",
						"     TotalIncome = avg(TotalIncome)) ~> aggregateEd1",
						"TotalIncome select(mapColumn(",
						"          Gender,",
						"          Education,",
						"          TotalIncome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRequired",
						"aggregateEd0 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkEducation0agg",
						"aggregateEd1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkEducation1agg"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataflowLoanDataMaritalAgg')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LoanDataOutAzureDb",
								"type": "DatasetReference"
							},
							"name": "SourceLoanData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LoanDataMaritalGen0Out",
								"type": "DatasetReference"
							},
							"name": "sinkGen0"
						},
						{
							"dataset": {
								"referenceName": "LoanDataMaritalGen1Out",
								"type": "DatasetReference"
							},
							"name": "sinkGen1"
						}
					],
					"transformations": [
						{
							"name": "DeriveColumnTotalIncome"
						},
						{
							"name": "splitGender"
						},
						{
							"name": "aggregateGen0"
						},
						{
							"name": "aggregateGen1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Loan_ID as string,",
						"          Gender as integer,",
						"          Marital as integer,",
						"          Dependents as integer,",
						"          Education as integer,",
						"          SelfEmplo as integer,",
						"          ApplIncome as integer,",
						"          CoApplIncome as integer,",
						"          LoanAmt as integer,",
						"          Term as double,",
						"          CreditHistory as integer,",
						"          PropArea as integer,",
						"          LoanStatus as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceLoanData",
						"SourceLoanData derive(TotalIncome = add(ApplIncome,CoApplIncome)) ~> DeriveColumnTotalIncome",
						"DeriveColumnTotalIncome split(Gender==0,",
						"     Gender == 1,",
						"     disjoint: true) ~> splitGender@(gender0, gender1, AllGender)",
						"splitGender@gender0 aggregate(groupBy(Marital),",
						"     TotalIncome = avg(TotalIncome)) ~> aggregateGen0",
						"splitGender@gender1 aggregate(groupBy(Marital),",
						"     TotalIncome = avg(TotalIncome)) ~> aggregateGen1",
						"aggregateGen0 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkGen0",
						"aggregateGen1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkGen1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowBulkCopyCustomer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ProjectDataFlowInDataWarehouse",
								"type": "DatasetReference"
							},
							"name": "sourceCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ProjectDataFlowOutDataStore",
								"type": "DatasetReference"
							},
							"name": "sinkDatastoreBlob"
						}
					],
					"transformations": [
						{
							"name": "selectRequiredColumns"
						},
						{
							"name": "aggregateByCountry"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customerNumber as integer,",
						"          customerName as string,",
						"          contactLastName as string,",
						"          contactFirstName as string,",
						"          phone as string,",
						"          addressLine1 as string,",
						"          addressLine2 as string,",
						"          city as string,",
						"          states as string,",
						"          postalCode as string,",
						"          country as string,",
						"          salesRepEmployeeNumber as integer,",
						"          creditLimit as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> sourceCustomer",
						"sourceCustomer select(mapColumn(",
						"          customerNumber,",
						"          customerName,",
						"          country,",
						"          creditLimit",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRequiredColumns",
						"selectRequiredColumns aggregate(groupBy(country),",
						"     creditLimit = avg(creditLimit)) ~> aggregateByCountry",
						"aggregateByCountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          country,",
						"          creditLimit",
						"     )) ~> sinkDatastoreBlob"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLookupDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PrimaryLoanData",
								"type": "DatasetReference"
							},
							"name": "sourceDBPrimaryLoanData"
						},
						{
							"dataset": {
								"referenceName": "SecondaryLoanData1",
								"type": "DatasetReference"
							},
							"name": "sourceDBSecondaryLoanData1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LoanDataLookupSinkSqlDB",
								"type": "DatasetReference"
							},
							"name": "SinkToDataStore"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Loan_ID as string,",
						"          Gender as integer,",
						"          Marital as integer,",
						"          Dependents as integer,",
						"          Education as integer,",
						"          SelfEmplo as integer,",
						"          ApplIncome as integer,",
						"          CoApplIncome as double,",
						"          LoanAmt as double,",
						"          Term as double,",
						"          CreditHistory as integer,",
						"          PropArea as integer,",
						"          LoanStatus as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDBPrimaryLoanData",
						"source(output(",
						"          Id as integer,",
						"          Loan_ID as string,",
						"          Gender as integer,",
						"          Marital as integer,",
						"          Dependents as integer,",
						"          Education as integer,",
						"          SelfEmplo as integer,",
						"          ApplIncome as integer,",
						"          CoApplIncome as double,",
						"          LoanAmt as double,",
						"          Term as double,",
						"          CreditHistory as integer,",
						"          PropArea as integer,",
						"          LoanStatus as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDBSecondaryLoanData1",
						"sourceDBPrimaryLoanData, sourceDBSecondaryLoanData1 lookup(sourceDBPrimaryLoanData@Loan_ID == sourceDBSecondaryLoanData1@Loan_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Loan_ID as string,",
						"          Gender as integer,",
						"          Marital as integer,",
						"          Dependents as integer,",
						"          Education as integer,",
						"          SelfEmplo as integer,",
						"          ApplIncome as integer,",
						"          CoApplIncome as double,",
						"          LoanAmt as double,",
						"          Term as double,",
						"          CreditHistory as integer,",
						"          PropArea as integer,",
						"          LoanStatus as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkToDataStore"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowBulkCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowBulkCopy",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowBulkCopyCustomer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCustomer": {},
									"sinkDatastoreBlob": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LinkShreyasDataStore",
									"type": "LinkedServiceReference"
								},
								"folderPath": "stagedoutput"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ProjectGladiator"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-29T18:32:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowBulkCopyCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipeLineGenderSplit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowGenderSplit",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowLoanDataMaritalAgg",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceLoanData": {},
									"sinkGen0": {},
									"sinkGen1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DataFlows"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-22T10:11:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataflowLoanDataMaritalAgg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipeLookupOnBulkCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupForBulkCopyTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT TABLE_SCHEMA, TABLE_NAME FROM information_schema.TABLES\nWHERE TABLE_TYPE = 'BASE TABLE' and TABLE_SCHEMA = 'BulkCopy' \nand TABLE_NAME IN ('Customers','ProductLines','Employees','Offices');\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ProjectDatasetInAzureSql",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PipeDBtoDW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LookupForBulkCopyTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PipeCopyJsonFromDBtoDW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ListOfTables": {
									"value": "@activity('LookupForBulkCopyTables').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ProjectGladiator"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-31T09:52:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineAppIncomeAggregation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowAgg",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataFlowLoanDataAgg",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IngestLoanData": {},
									"OutputLoanDataAgg": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DataFlows"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-22T07:49:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataFlowLoanDataAgg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineEducationSplit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowEducationSplit",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowEducationSplit",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sinkEducation0agg": {},
									"sinkEducation1agg": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DataFlows"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-22T10:32:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataflowEducationSplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineIfElse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PipelineIfAndElse",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.copyfiles",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PipeCopyAdltostoreFalse",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "PipelineTrue",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PipeCopyAllFilesTrue",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"copyfiles": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "GetMetaForEach"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-20T10:14:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineLookupLoanData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowLookUp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowLookupDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceDBPrimaryLoanData": {},
									"sourceDBSecondaryLoanData1": {},
									"SinkToDataStore": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DataFlows"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-22T12:28:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowLookupDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineProductAggregation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ActivityDataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataFlowFilterAgg",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IngestProduct": {},
									"OutputShreyasdbStore": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DataFlows"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-22T05:42:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataFlowFilterAgg')]"
			]
		}
	]
}